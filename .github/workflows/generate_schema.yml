name: Generate API Schema

on:
  workflow_call:
    inputs:
      api_type:
        description: "Defines the api the schema is generated for. Must be storeapi or adminapi"  
        required: true
        type: string
    outputs:
      api_schema:
        description: "The the open api 3 schema as json"
        value: ${{ jobs.generate_api_schema.outputs.schema }}
    secrets:
      DEPLOY_USER:
        required: true
      DEPLOY_TOKEN: 
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  generate_api_schema:
    name: "Generate an openapi3 schema for the given api type"
    runs-on: ubuntu-latest
    container: "shopware/development:8.1-composer-2"
    outputs:
      schema: ${{ steps.generate.outputs.schema }}
    env:
      APP_ENV: prod
      DATABASE_URL: mysql://root:root@database:3306/root
      APP_URL: http://localhost:8000
      APP_SECRET: devsecret
      BLUE_GREEN_DEPLOYMENT: 0
      SCHEMA_NAME: ""
      SCHEMA_FLAGS: ""

    services:
      database:
        image: mysql:8
        env:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: root

    steps:    
    - name: Checkout Shopware
      uses: actions/checkout@v3
      with:
          repository: shopware/platform
          ref: trunk
          fetch-depth: 0

    - name: configure job
      run: |
        if [ "${{ inputs.api_type }}" = "storeapi" ]; then
          echo "SCHEMA_FLAGS=-s openapi3 --store-api storeapi.json" >> $GITHUB_ENV
        elseif [ "${{ inputs.api_type }}" = "adminapi" ]; then
          echo "SCHEMA_FLAGS=-s openapi3 adminapi.json" >> $GITHUB_ENV
        else
          echo 'api_type must be either "storeapi" or "adminapi"'
          exit 1
        fi

        export SWTAG=$(git tag | tr '.' ' ' | sort -nr -k3,4 | head -n1 | tr ' ' '.')
        echo "SCHEMA_NAME=store-api-schema-$SWTAG" >> $GITHUB_ENV

    - name: checkout latest release
      run: |
        git checkout $SWTAG
        
    - name: checkout commercial plugin
      env:
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      run: |
        git clone https://${DEPLOY_USER}:${DEPLOY_TOKEN}@gitlab.shopware.com/shopware/6/product/commercial.git custom/plugins/SwagCommercial
        
    - name: Generate storeapi.json
      run: |
        composer install -o
        composer run init:db
        ./bin/console plugin:install -a SwagCommercial 
        ./bin/console framework:schema $SCHEMA_FLAGS
        sed 's!\\/!/!g' -i storeapi.json
        
    - name: upload api schema
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.SCHEMA_NAME }}
        path: storeapi.json
        retention-days: 1
        
    - name: set output
      id: generate
      run: echo "schema=$SCHEMA_NAME" >> $GITHUB_OUTPUT
